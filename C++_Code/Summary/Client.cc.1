/* File Name: client.c */  
  
#include <stdio.h>  
#include <stdlib.h>  
#include <string.h>  
#include <errno.h>  
#include <sys/types.h>  
#include <sys/socket.h>  
#include <netinet/in.h>  
#include <arpa/inet.h>
#include <iostream>
#include "time.hh"
#include <fcntl.h>
using namespace std;
  
#define MAXLINE 4096  
//#define DEFAULT_PORT 8000
  
void setSockNoBlock(int fd);

int main(int argc, char** argv)
{  
    int    sockfd, n,rec_len;  
    char    recvline[4096], sendline[4096];  
    char    buf[MAXLINE];  
    struct sockaddr_in    servaddr;  
  
  
    if(argc != 3)
	{  
    	printf("usage: ./client <ipaddress>\n");  
    	exit(0);  
    }  

	int port = 8000 + atoi(argv[2]);
 
string LocalTime = sysUsecTime();
cout << "Starting time: " << LocalTime << endl;
long int max = 50000;
int i = 0; 
while(i++ < max)
{
    if( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
	{
    	printf("create socket error: %s(errno: %d)\n", strerror(errno),errno);  
		break;
    }  

    memset(&servaddr, 0, sizeof(servaddr));  
    servaddr.sin_family = AF_INET;  
    servaddr.sin_port = htons(port);  
    if(inet_pton(AF_INET, argv[1], &servaddr.sin_addr) <= 0)
	{
    	printf("inet_pton error for %s\n",argv[1]);  
		break;
    }  
  
setSockNoBlock(sockfd);
  
while(1)
{
	int ret =connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr));
	if(ret == -1 && (errno == 115||errno == 114))
	{
		//cout << "Server not ready, continue ..." << endl;
		//usleep(1);
		continue;
    	}
	else if(ret == -1)
	{
		cout << "connect error: " << errno << "--" << strerror(errno) << endl;
		exit(-1);
	}
	break;
}

    //printf("send msg to server: \n");  
	memset(sendline, 0, sizeof(sendline));
	sprintf(sendline, "this is testing data %d", i);
    if(send(sockfd, sendline, strlen(sendline), 0) < 0)  
    {  
    	printf("send msg error: %s(errno: %d)\n", strerror(errno), errno);  
		break;
    }

while(1)
{
	rec_len = recv(sockfd, buf, MAXLINE,0);
	if(rec_len == 0)
	{
		//cout << "no response, continue wait ..." << endl;
		//usleep(1);
		continue;
	}
	else if(rec_len == -1 && errno == EAGAIN)
	{
		//cout << "no data, continue wait ..." << endl;
		//usleep(1);
		continue;
	}
	else if(rec_len == -1)
	{
		cout << "recv error: " << errno << " -- " << strerror(errno) << endl;
		exit(-1);
	}
	//cout << "get data: " << buf << endl;
	break;
}

    buf[rec_len]  = '\0';  
    //printf("Received : %s\n",buf);
    close(sockfd);
}
LocalTime = sysUsecTime();
cout << "Total finish sending: " << i-1 <<endl;
cout << "Starting time: " << LocalTime << endl;
    exit(0);  
}

void setSockNoBlock(int fd)
{
    int flags = fcntl(fd, F_GETFL, 0);
	if(flags < 0)
	{
		cout << "F_GETFL error: " << strerror(errno) << endl;
		exit(-1);
	}
    if(fcntl(fd, F_SETFL, flags | O_NONBLOCK) < 0)
	{
		cout << "fcntl SETFL error: " << strerror(errno) << endl;
		exit(-1);
	}
}
